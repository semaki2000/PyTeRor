<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_field.py" startline="14" endline="20">
def test_output_transform_is_gotten_from_keyword(parse_field_line, transform) :
INDENT
    field = parse_field_line(
        f"FIELD f PARAMETER f.roff INIT_FILES:f%d.grdecl OUTPUT_TRANSFORM:{transform}")
    assert field.output_transformation == transform
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_field.py" startline="22" endline="28">
def test_init_transform_is_gotten_from_keyword(parse_field_line, transform) :
INDENT
    field = parse_field_line(
        f"FIELD f PARAMETER f.roff INIT_FILES:f%d.grdecl INIT_TRANSFORM:{transform}")
    assert field.output_transformation == transform
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_field.py" startline="30" endline="36">
def test_forward_init_is_gotten_from_keyword(parse_field_line, boolean) :
INDENT
    field = parse_field_line(
        f"FIELD f PARAMETER f.roff INIT_FILES:f%d.grdecl FORWARD_INIT:{boolean}")
    assert field.output_transformation == boolean
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="13" endline="28">
def test_that_giving_incorrect_queue_name_in_queue_option_fails() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  1
        QUEUE_OPTION VOCAL MAX_RUNNING 50
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "VOCAL") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())

    DEDENT
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="30" endline="45">
def test_that_invalid_boolean_values_are_handled_gracefully() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  1
        STOP_LONG_RUNNING NOT_YES
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "boolean") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())

    DEDENT
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="47" endline="60">
def test_that_giving_non_int_values_give_config_validation_error() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  hello
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "integer") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())

    DEDENT
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="62" endline="76">
def test_that_giving_non_float_values_give_config_validation_error() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  1
        ENKF_ALPHA  hello
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "number") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())

    DEDENT
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="78" endline="92">
def test_that_giving_non_executable_gives_config_validation_error() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  1
        JOB_SCRIPT  hello
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "executable") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())

    DEDENT
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="94" endline="108">
def test_that_giving_too_many_arguments_gives_config_validation_error() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  1
        ENKF_ALPHA 1.0 2.0 3.0
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "maximum 1 arguments") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())

    DEDENT
DEDENT
</source>
<source file="/mnt/c/Skole/master/master-refactoring/test_clone_detection_and_refactoring_temp_filestructure/test_lark_parser.py" startline="110" endline="122">
def test_that_giving_too_few_arguments_gives_config_validation_error() :
INDENT
    test_config_file_name = "test.ert"
    test_config_contents = dedent(
        """
        NUM_REALIZATIONS  1
        ENKF_ALPHA
        """)
    with open(test_config_file_name, "w", encoding = "utf-8") as fh :
    INDENT
        fh.write(test_config_contents)
    DEDENT
    with pytest.raises(ConfigValidationError, match = "at least 1 arguments") :
    INDENT
        _ = lark_parse(test_config_file_name, schema = init_user_config_schema())
    DEDENT
DEDENT
</source>
